// This file was generated by SquareLine Studio
// SquareLine Studio version: SquareLine Studio 1.5.2
// LVGL version: 8.3.11
// Project name: SquareLine_Project

#include "ui.h"
#include "ui_modern_theme.h" // DEADEYE theme support
#include "ui_Shot_Counter_Page.h"
#include "ui_Stage_Timer_Page.h"
#include <stdio.h>
#include <math.h>

// --- Color threshold constants ---
#define BUBBLE_LEVEL_THRESHOLD_GREEN 3.0f
#define BUBBLE_LEVEL_THRESHOLD_YELLOW 8.0f
#define TIME_WARNING_THRESHOLD_SECONDS 30

// --- Bubble Level Definitions ---
#define LEVEL_CANVAS_WIDTH 200
#define LEVEL_CANVAS_HEIGHT 40
#define TUBE_WIDTH (LEVEL_CANVAS_WIDTH - 10)
#define TUBE_HEIGHT (LEVEL_CANVAS_HEIGHT - 10)
#define TUBE_BORDER_RADIUS 8
#define BUBBLE_HEIGHT (TUBE_HEIGHT - 2)
#define BUBBLE_WIDTH (BUBBLE_HEIGHT + 12)
#define MAX_ROLL_ANGLE 30.0f

// --- Global UI object pointers for Competition Page ---
lv_obj_t *ui_Competition_Page = nullptr;
lv_obj_t *ui_CompPageLabel = nullptr;

// Original Navigation buttons
lv_obj_t *ui_Page5HomeBTN = nullptr;
lv_obj_t *ui_Page5HomeBTN1 = nullptr;
lv_obj_t *ui_Page5PrevBTN = nullptr;
lv_obj_t *ui_Page5PrevBTN1 = nullptr;
lv_obj_t *ui_Page5NextBTN = nullptr;
lv_obj_t *ui_Page5NextBTN1 = nullptr;

// New UI Elements
lv_obj_t *ui_CompPageTimeStaticLabel = nullptr;
lv_obj_t *ui_CompPageTimeValueLabel = nullptr;
lv_obj_t *ui_CompPageShotsStaticLabel = nullptr;
lv_obj_t *ui_CompPageShotsValueLabel = nullptr;
lv_obj_t *ui_CompPageStartButton = nullptr;
lv_obj_t *ui_CompPageStartButtonLabel = nullptr;
lv_obj_t *ui_CompPageResetButton = nullptr;
lv_obj_t *ui_CompPageResetButtonLabel = nullptr;

// Bubble Level UI Elements
static lv_obj_t *ui_BubbleLevelCanvas = nullptr;
static lv_obj_t *ui_RollAngleLabel = nullptr;
static lv_timer_t *ui_level_update_timer = nullptr;

// LVGL Timer for live data updates on this page
static lv_timer_t *competition_page_data_refresh_timer = nullptr;

// --- Colors for the Bubble Level ---
static lv_color_t color_page_bg_bubble;
static lv_color_t color_tube_bg_bubble;
static lv_color_t color_bubble_green;
static lv_color_t color_bubble_yellow;
static lv_color_t color_bubble_red;
static lv_color_t color_text_roll_label;
static lv_color_t color_tube_marking_bubble;

// Forward declarations
static void competition_page_data_refresh_timer_cb(lv_timer_t *timer);
static void bubble_level_update_timer_cb(lv_timer_t *timer);
static void competition_page_visibility_event_cb(lv_event_t *e);
static void draw_bubble_level_on_canvas(float roll_angle);
void ui_Competition_Page_update_live_data_display(void);

// Event handlers
void ui_event_Page5HomeBTN(lv_event_t *e);
void ui_event_Page5PrevBTN(lv_event_t *e);
void ui_event_Page5NextBTN(lv_event_t *e);
void ui_event_CompPageStartButton(lv_event_t *e);
void ui_event_CompPageResetButton(lv_event_t *e);

// --- Function to handle recoil event, called externally ---
void ui_competition_page_handle_recoil_event(void)
{
    bool timer_is_active = ui_stage_timer_is_timer_running();

    if (timer_is_active)
    {
        ui_shot_counter_decrement_shot();
        ui_Competition_Page_update_live_data_display();
    }
}

// --- Timer callback for updating competition page data ---
static void competition_page_data_refresh_timer_cb(lv_timer_t *timer)
{
    ui_Competition_Page_update_live_data_display();
}

// --- Timer callback for updating bubble level ---
static void bubble_level_update_timer_cb(lv_timer_t *timer)
{
    if (ui_BubbleLevelCanvas != nullptr && ui_RollAngleLabel != nullptr)
    {
        float roll_angle = get_qmi8658_roll_degrees();
        draw_bubble_level_on_canvas(roll_angle);
        
        char roll_text[16];
        snprintf(roll_text, sizeof(roll_text), "%.1fÂ°", roll_angle);
        lv_label_set_text(ui_RollAngleLabel, roll_text);
    }
}

// --- Visibility event callback ---
static void competition_page_visibility_event_cb(lv_event_t *e)
{
    lv_event_code_t code = lv_event_get_code(e);

    if (code == LV_EVENT_SCREEN_LOADED)
    {
        // Start timers when page becomes visible
        if (competition_page_data_refresh_timer == nullptr)
        {
            competition_page_data_refresh_timer = lv_timer_create(
                competition_page_data_refresh_timer_cb,
                ui_settings_get_competition_page_update_rate(),
                nullptr
            );
        }

        if (ui_level_update_timer == nullptr)
        {
            ui_level_update_timer = lv_timer_create(
                bubble_level_update_timer_cb,
                ui_settings_get_bubble_level_update_rate(),
                nullptr
            );
        }
    }
    else if (code == LV_EVENT_SCREEN_UNLOADED)
    {
        // Stop timers when page becomes invisible
        if (competition_page_data_refresh_timer != nullptr)
        {
            lv_timer_del(competition_page_data_refresh_timer);
            competition_page_data_refresh_timer = nullptr;
        }

        if (ui_level_update_timer != nullptr)
        {
            lv_timer_del(ui_level_update_timer);
            ui_level_update_timer = nullptr;
        }
    }
}

// --- Update live data display ---
void ui_Competition_Page_update_live_data_display(void)
{
    if (ui_CompPageTimeValueLabel != nullptr)
    {
        int32_t time_remaining = ui_stage_timer_get_time_remaining_seconds();
        int minutes = time_remaining / 60;
        int seconds = time_remaining % 60;
        
        char time_text[16];
        snprintf(time_text, sizeof(time_text), "%02d:%02d", minutes, seconds);
        lv_label_set_text(ui_CompPageTimeValueLabel, time_text);
        
        // Color coding for time warning
        if (time_remaining <= (int32_t)ui_settings_get_time_warning_threshold())
        {
            lv_obj_set_style_text_color(ui_CompPageTimeValueLabel, 
                ui_modern_colors.accent_red, LV_PART_MAIN);
        }
        else
        {
            lv_obj_set_style_text_color(ui_CompPageTimeValueLabel, 
                ui_modern_colors.text_primary, LV_PART_MAIN);
        }
    }

    if (ui_CompPageShotsValueLabel != nullptr)
    {
        int shots_remaining = ui_shot_counter_get_shots_remaining();
        char shots_text[16];
        snprintf(shots_text, sizeof(shots_text), "%d", shots_remaining);
        lv_label_set_text(ui_CompPageShotsValueLabel, shots_text);
    }

    if (ui_CompPageStartButtonLabel != nullptr)
    {
        bool timer_running = ui_stage_timer_is_timer_running();
        lv_label_set_text(ui_CompPageStartButtonLabel, timer_running ? "Pause" : "Start");
    }
}

// --- Draw bubble level on canvas ---
static void draw_bubble_level_on_canvas(float roll_angle)
{
    if (ui_BubbleLevelCanvas == nullptr) return;

    lv_canvas_fill_bg(ui_BubbleLevelCanvas, color_page_bg_bubble, LV_OPA_COVER);

    // Draw tube outline
    lv_draw_rect_dsc_t tube_dsc;
    lv_draw_rect_dsc_init(&tube_dsc);
    tube_dsc.bg_color = color_tube_bg_bubble;
    tube_dsc.bg_opa = LV_OPA_COVER;
    tube_dsc.border_color = color_tube_marking_bubble;
    tube_dsc.border_width = 1;
    tube_dsc.radius = TUBE_BORDER_RADIUS;

    lv_area_t tube_area;
    tube_area.x1 = 5;
    tube_area.y1 = 5;
    tube_area.x2 = LEVEL_CANVAS_WIDTH - 6;
    tube_area.y2 = LEVEL_CANVAS_HEIGHT - 6;
    
    lv_canvas_draw_rect(ui_BubbleLevelCanvas, 5, 5, TUBE_WIDTH, TUBE_HEIGHT, &tube_dsc);

    // Calculate bubble position
    float clamped_angle = roll_angle;
    if (clamped_angle > MAX_ROLL_ANGLE) clamped_angle = MAX_ROLL_ANGLE;
    if (clamped_angle < -MAX_ROLL_ANGLE) clamped_angle = -MAX_ROLL_ANGLE;

    float normalized_position = clamped_angle / MAX_ROLL_ANGLE;
    int bubble_center_x = (LEVEL_CANVAS_WIDTH / 2) + (int)(normalized_position * (TUBE_WIDTH - BUBBLE_WIDTH) / 2);

    // Determine bubble color based on angle
    lv_color_t bubble_color;
    float abs_angle = fabs(roll_angle);
    if (abs_angle <= ui_settings_get_bubble_green_threshold())
    {
        bubble_color = color_bubble_green;
    }
    else if (abs_angle <= ui_settings_get_bubble_yellow_threshold())
    {
        bubble_color = color_bubble_yellow;
    }
    else
    {
        bubble_color = color_bubble_red;
    }

    // Draw bubble
    lv_draw_rect_dsc_t bubble_dsc;
    lv_draw_rect_dsc_init(&bubble_dsc);
    bubble_dsc.bg_color = bubble_color;
    bubble_dsc.bg_opa = LV_OPA_COVER;
    bubble_dsc.radius = BUBBLE_HEIGHT / 2;

    int bubble_x = bubble_center_x - BUBBLE_WIDTH / 2;
    int bubble_y = 6;
    
    lv_canvas_draw_rect(ui_BubbleLevelCanvas, bubble_x, bubble_y, BUBBLE_WIDTH, BUBBLE_HEIGHT, &bubble_dsc);

    // Draw center markings
    lv_draw_line_dsc_t line_dsc;
    lv_draw_line_dsc_init(&line_dsc);
    line_dsc.color = color_tube_marking_bubble;
    line_dsc.width = 1;

    lv_point_t center_line[] = {
        {LEVEL_CANVAS_WIDTH / 2, 5},
        {LEVEL_CANVAS_WIDTH / 2, LEVEL_CANVAS_HEIGHT - 5}
    };
    lv_canvas_draw_line(ui_BubbleLevelCanvas, center_line, 2, &line_dsc);
}

// --- Build function for Competition Page screen ---
void ui_Competition_Page_screen_init(void)
{
    ui_Competition_Page = lv_obj_create(NULL);
    lv_obj_clear_flag(ui_Competition_Page, LV_OBJ_FLAG_SCROLLABLE);

    // Apply DEADEYE theme
    ui_modern_style_page(ui_Competition_Page);

    ui_CompPageLabel = lv_label_create(ui_Competition_Page);
    lv_obj_set_width(ui_CompPageLabel, LV_SIZE_CONTENT);
    lv_obj_set_height(ui_CompPageLabel, LV_SIZE_CONTENT);
    lv_obj_set_x(ui_CompPageLabel, 0);
    lv_obj_set_y(ui_CompPageLabel, -125);
    lv_obj_set_align(ui_CompPageLabel, LV_ALIGN_CENTER);
    lv_label_set_text(ui_CompPageLabel, "DEADEYE COMPETITION");
    ui_modern_style_label_title(ui_CompPageLabel);

    // Initialize DEADEYE theme colors
    color_page_bg_bubble = ui_modern_colors.primary_dark;
    color_tube_bg_bubble = ui_modern_colors.primary_light;
    color_bubble_green = ui_modern_colors.accent_green;
    color_bubble_yellow = ui_modern_colors.warning_amber;
    color_bubble_red = ui_modern_colors.accent_red;
    color_text_roll_label = ui_modern_colors.text_primary;
    color_tube_marking_bubble = ui_modern_colors.text_secondary;

    // Create time display
    ui_CompPageTimeStaticLabel = lv_label_create(ui_Competition_Page);
    lv_label_set_text(ui_CompPageTimeStaticLabel, "Time:");
    lv_obj_set_x(ui_CompPageTimeStaticLabel, -80);
    lv_obj_set_y(ui_CompPageTimeStaticLabel, -90);
    lv_obj_set_align(ui_CompPageTimeStaticLabel, LV_ALIGN_CENTER);
    ui_modern_style_label_caption(ui_CompPageTimeStaticLabel);

    ui_CompPageTimeValueLabel = lv_label_create(ui_Competition_Page);
    lv_obj_set_width(ui_CompPageTimeValueLabel, 120);
    lv_obj_align_to(ui_CompPageTimeValueLabel, ui_CompPageTimeStaticLabel, LV_ALIGN_OUT_RIGHT_MID, 15, -5);
    lv_obj_set_style_text_font(ui_CompPageTimeValueLabel, &lv_font_montserrat_34, LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_label_set_text(ui_CompPageTimeValueLabel, "00:00");
    ui_modern_style_label_body(ui_CompPageTimeValueLabel);

    // Create shots display
    ui_CompPageShotsStaticLabel = lv_label_create(ui_Competition_Page);
    lv_label_set_text(ui_CompPageShotsStaticLabel, "Shots:");
    lv_obj_set_x(ui_CompPageShotsStaticLabel, -80);
    lv_obj_set_y(ui_CompPageShotsStaticLabel, -50);
    lv_obj_set_align(ui_CompPageShotsStaticLabel, LV_ALIGN_CENTER);
    ui_modern_style_label_caption(ui_CompPageShotsStaticLabel);

    ui_CompPageShotsValueLabel = lv_label_create(ui_Competition_Page);
    lv_obj_set_width(ui_CompPageShotsValueLabel, 80);
    lv_obj_align_to(ui_CompPageShotsValueLabel, ui_CompPageShotsStaticLabel, LV_ALIGN_OUT_RIGHT_MID, 50, -5);
    lv_obj_set_style_text_font(ui_CompPageShotsValueLabel, &lv_font_montserrat_34, LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_label_set_text(ui_CompPageShotsValueLabel, "0");
    ui_modern_style_label_body(ui_CompPageShotsValueLabel);

    // Create bubble level
    ui_RollAngleLabel = lv_label_create(ui_Competition_Page);
    lv_label_set_text(ui_RollAngleLabel, "0Â°");
    lv_obj_set_style_text_color(ui_RollAngleLabel, color_text_roll_label, LV_PART_MAIN);
    lv_obj_set_style_text_font(ui_RollAngleLabel, &lv_font_montserrat_20, LV_PART_MAIN | LV_STATE_DEFAULT);
    ui_modern_style_label_caption(ui_RollAngleLabel);
    lv_obj_align(ui_RollAngleLabel, LV_ALIGN_CENTER, 0, 40);

    ui_BubbleLevelCanvas = lv_canvas_create(ui_Competition_Page);
    static lv_color_t canvas_buffer[LV_CANVAS_BUF_SIZE_TRUE_COLOR(LEVEL_CANVAS_WIDTH, LEVEL_CANVAS_HEIGHT)];
    lv_canvas_set_buffer(ui_BubbleLevelCanvas, canvas_buffer, LEVEL_CANVAS_WIDTH, LEVEL_CANVAS_HEIGHT, LV_IMG_CF_TRUE_COLOR);
    lv_obj_align(ui_BubbleLevelCanvas, LV_ALIGN_CENTER, 0, 10);
    draw_bubble_level_on_canvas(0.0f);

    // Create control buttons
    ui_CompPageStartButton = lv_btn_create(ui_Competition_Page);
    lv_obj_set_width(ui_CompPageStartButton, 90);
    lv_obj_set_height(ui_CompPageStartButton, 40);
    lv_obj_set_x(ui_CompPageStartButton, -55);
    lv_obj_set_y(ui_CompPageStartButton, 80);
    lv_obj_set_align(ui_CompPageStartButton, LV_ALIGN_CENTER);
    ui_modern_style_button_primary(ui_CompPageStartButton);

    ui_CompPageStartButtonLabel = lv_label_create(ui_CompPageStartButton);
    lv_label_set_text(ui_CompPageStartButtonLabel, "Start");
    lv_obj_set_align(ui_CompPageStartButtonLabel, LV_ALIGN_CENTER);

    ui_CompPageResetButton = lv_btn_create(ui_Competition_Page);
    lv_obj_set_width(ui_CompPageResetButton, 90);
    lv_obj_set_height(ui_CompPageResetButton, 40);
    lv_obj_set_x(ui_CompPageResetButton, 55);
    lv_obj_set_y(ui_CompPageResetButton, 80);
    lv_obj_set_align(ui_CompPageResetButton, LV_ALIGN_CENTER);
    ui_modern_style_button_secondary(ui_CompPageResetButton);

    ui_CompPageResetButtonLabel = lv_label_create(ui_CompPageResetButton);
    lv_label_set_text(ui_CompPageResetButtonLabel, "Reset");
    lv_obj_set_align(ui_CompPageResetButtonLabel, LV_ALIGN_CENTER);

    // Create navigation buttons
    const lv_coord_t nav_btn_y_offset = 125;

    ui_Page5HomeBTN = lv_btn_create(ui_Competition_Page);
    lv_obj_set_width(ui_Page5HomeBTN, 50);
    lv_obj_set_height(ui_Page5HomeBTN, 25);
    lv_obj_set_x(ui_Page5HomeBTN, -60);
    lv_obj_set_y(ui_Page5HomeBTN, nav_btn_y_offset);
    lv_obj_set_align(ui_Page5HomeBTN, LV_ALIGN_CENTER);
    ui_modern_style_button_icon(ui_Page5HomeBTN);

    ui_Page5HomeBTN1 = lv_label_create(ui_Page5HomeBTN);
    lv_label_set_text(ui_Page5HomeBTN1, "HOME");
    lv_obj_set_align(ui_Page5HomeBTN1, LV_ALIGN_CENTER);

    ui_Page5PrevBTN = lv_btn_create(ui_Competition_Page);
    lv_obj_set_width(ui_Page5PrevBTN, 50);
    lv_obj_set_height(ui_Page5PrevBTN, 25);
    lv_obj_set_x(ui_Page5PrevBTN, 0);
    lv_obj_set_y(ui_Page5PrevBTN, nav_btn_y_offset);
    lv_obj_set_align(ui_Page5PrevBTN, LV_ALIGN_CENTER);
    ui_modern_style_button_icon(ui_Page5PrevBTN);

    ui_Page5PrevBTN1 = lv_label_create(ui_Page5PrevBTN);
    lv_label_set_text(ui_Page5PrevBTN1, "PREV");
    lv_obj_set_align(ui_Page5PrevBTN1, LV_ALIGN_CENTER);

    ui_Page5NextBTN = lv_btn_create(ui_Competition_Page);
    lv_obj_set_width(ui_Page5NextBTN, 50);
    lv_obj_set_height(ui_Page5NextBTN, 25);
    lv_obj_set_x(ui_Page5NextBTN, 60);
    lv_obj_set_y(ui_Page5NextBTN, nav_btn_y_offset);
    lv_obj_set_align(ui_Page5NextBTN, LV_ALIGN_CENTER);
    ui_modern_style_button_icon(ui_Page5NextBTN);

    ui_Page5NextBTN1 = lv_label_create(ui_Page5NextBTN);
    lv_label_set_text(ui_Page5NextBTN1, "NEXT");
    lv_obj_set_align(ui_Page5NextBTN1, LV_ALIGN_CENTER);

    // Add event callbacks
    lv_obj_add_event_cb(ui_Page5HomeBTN, ui_event_Page5HomeBTN, LV_EVENT_ALL, NULL);
    lv_obj_add_event_cb(ui_Page5PrevBTN, ui_event_Page5PrevBTN, LV_EVENT_ALL, NULL);
    lv_obj_add_event_cb(ui_Page5NextBTN, ui_event_Page5NextBTN, LV_EVENT_ALL, NULL);
    lv_obj_add_event_cb(ui_CompPageStartButton, ui_event_CompPageStartButton, LV_EVENT_ALL, NULL);
    lv_obj_add_event_cb(ui_CompPageResetButton, ui_event_CompPageResetButton, LV_EVENT_ALL, NULL);

    lv_obj_add_event_cb(ui_Competition_Page, competition_page_visibility_event_cb, LV_EVENT_SCREEN_LOADED, NULL);
    lv_obj_add_event_cb(ui_Competition_Page, competition_page_visibility_event_cb, LV_EVENT_SCREEN_UNLOADED, NULL);

    // Initial data update
    ui_Competition_Page_update_live_data_display();
}

// --- Screen destroy function ---
void ui_Competition_Page_screen_destroy(void)
{
    if (competition_page_data_refresh_timer)
    {
        lv_timer_del(competition_page_data_refresh_timer);
        competition_page_data_refresh_timer = nullptr;
    }

    if (ui_level_update_timer)
    {
        lv_timer_del(ui_level_update_timer);
        ui_level_update_timer = nullptr;
    }

    if (ui_Competition_Page)
    {
        lv_obj_del(ui_Competition_Page);
        ui_Competition_Page = nullptr;
    }
}
