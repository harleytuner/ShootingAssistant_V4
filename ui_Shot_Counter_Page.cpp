// This file was generated by SquareLine Studio
// SquareLine Studio version: SquareLine Studio 1.5.2
// LVGL version: 8.3.11
// Project name: SquareLine_Project

#include "ui.h"              // This should include lvgl.h and other necessary headers
#include "ui_modern_theme.h" // DEADEYE theme support
#include <stdio.h>
// ui.h should ensure ui_Shot_Counter_Page.h is included for DEFAULT_INITIAL_SHOT_COUNT

// --- Definitions for global UI object pointers for this screen ---
lv_obj_t *ui_Shot_Counter_Page = nullptr;
lv_obj_t *ui_Label6 = nullptr; // Title "Shot Counter"
lv_obj_t *ui_Page3HomeBTN = nullptr;
lv_obj_t *ui_Page3HomeBTN1 = nullptr; // Label for Home button
lv_obj_t *ui_Page3PrevBTN = nullptr;
lv_obj_t *ui_Page3PrevBTN1 = nullptr; // Label for Prev button
lv_obj_t *ui_Page3NextBTN = nullptr;
lv_obj_t *ui_Page3NextBTN1 = nullptr; // Label for Next button

// New UI Element Objects for Shot Counter
lv_obj_t *ui_ShotDisplayValueLabel = nullptr;
lv_obj_t *ui_ShotAddButton = nullptr;
lv_obj_t *ui_ShotAddLabel = nullptr;
lv_obj_t *ui_ShotSubtractButton = nullptr;
lv_obj_t *ui_ShotSubtractLabel = nullptr;
lv_obj_t *ui_ShotResetButton = nullptr;
lv_obj_t *ui_ShotResetButtonLabel = nullptr;

// --- Static variables for shot counting ---
static int current_set_shot_count;
static int shots_remaining_count;

// --- Forward declaration for the update helper ---
static void update_shot_display_label(void);

// --- Functions to access shot counter data and actions (for Competition Page) ---
int ui_shot_counter_get_shots_remaining(void)
{
    return shots_remaining_count;
}

int ui_shot_counter_get_current_set_shot_count(void)
{
    return current_set_shot_count;
}

// Resets remaining shots to whatever current_set_shot_count is.
void ui_shot_counter_reset_to_set_count(void)
{
    shots_remaining_count = current_set_shot_count;
    if (lv_scr_act() == ui_Shot_Counter_Page && ui_ShotDisplayValueLabel != nullptr)
    {
        update_shot_display_label();
    }
}

// --- Function to reset both counts to the defined default value ---
void ui_shot_counter_reset_all_to_default(void)
{
    current_set_shot_count = ui_settings_get_default_shot_count();
    shots_remaining_count = current_set_shot_count;
    if (lv_scr_act() == ui_Shot_Counter_Page && ui_ShotDisplayValueLabel != nullptr)
    {
        update_shot_display_label();
    }
}

// --- External function for decrementing shot count (called by recoil detection) ---
void ui_external_decrement_shot_count(void)
{
    if (lv_scr_act() == ui_Shot_Counter_Page)
    {
        if (shots_remaining_count > 0)
        {
            shots_remaining_count--;
            update_shot_display_label();
        }
    }
}

// --- Function to decrement shot count (internal) ---
void ui_shot_counter_decrement_shot(void)
{
    if (shots_remaining_count > 0)
    {
        shots_remaining_count--;
        if (lv_scr_act() == ui_Shot_Counter_Page && ui_ShotDisplayValueLabel != nullptr)
        {
            update_shot_display_label();
        }
    }
}

// --- Helper function to update display ---
static void update_shot_display_label(void)
{
    if (ui_ShotDisplayValueLabel != nullptr)
    {
        char shot_text[16];
        snprintf(shot_text, sizeof(shot_text), "%d / %d", shots_remaining_count, current_set_shot_count);
        lv_label_set_text(ui_ShotDisplayValueLabel, shot_text);
    }
}

// --- Event handlers ---
void ui_event_ShotAddButton(lv_event_t *e)
{
    lv_event_code_t code = lv_event_get_code(e);
    if (code == LV_EVENT_CLICKED)
    {
        if (current_set_shot_count < 99)
        {
            current_set_shot_count++;
            shots_remaining_count = current_set_shot_count;
            update_shot_display_label();
        }
    }
}

void ui_event_ShotSubtractButton(lv_event_t *e)
{
    lv_event_code_t code = lv_event_get_code(e);
    if (code == LV_EVENT_CLICKED)
    {
        if (current_set_shot_count > 1)
        {
            current_set_shot_count--;
            shots_remaining_count = current_set_shot_count;
            update_shot_display_label();
        }
    }
}

void ui_event_ShotResetButton(lv_event_t *e)
{
    lv_event_code_t code = lv_event_get_code(e);
    if (code == LV_EVENT_CLICKED)
    {
        shots_remaining_count = current_set_shot_count;
        update_shot_display_label();
    }
}

// --- Screen initialization ---
void ui_Shot_Counter_Page_screen_init(void)
{
    // Initialize shot counter values from settings
    current_set_shot_count = ui_settings_get_default_shot_count();
    shots_remaining_count = current_set_shot_count;

    ui_Shot_Counter_Page = lv_obj_create(NULL);
    lv_obj_clear_flag(ui_Shot_Counter_Page, LV_OBJ_FLAG_SCROLLABLE);

    // Apply DEADEYE theme
    ui_modern_style_page(ui_Shot_Counter_Page);

    ui_Label6 = lv_label_create(ui_Shot_Counter_Page);
    lv_obj_set_width(ui_Label6, LV_SIZE_CONTENT);
    lv_obj_set_height(ui_Label6, LV_SIZE_CONTENT);
    lv_obj_set_x(ui_Label6, 0);
    lv_obj_set_y(ui_Label6, -125);
    lv_obj_set_align(ui_Label6, LV_ALIGN_CENTER);
    lv_label_set_text(ui_Label6, "DEADEYE SHOT COUNTER");
    ui_modern_style_label_title(ui_Label6);

    ui_ShotDisplayValueLabel = lv_label_create(ui_Shot_Counter_Page);
    lv_obj_set_width(ui_ShotDisplayValueLabel, LV_SIZE_CONTENT);
    lv_obj_set_height(ui_ShotDisplayValueLabel, LV_SIZE_CONTENT);
    lv_obj_set_x(ui_ShotDisplayValueLabel, 0);
    lv_obj_set_y(ui_ShotDisplayValueLabel, -50);
    lv_obj_set_align(ui_ShotDisplayValueLabel, LV_ALIGN_CENTER);
    lv_obj_set_style_text_font(ui_ShotDisplayValueLabel, &lv_font_montserrat_48, LV_PART_MAIN | LV_STATE_DEFAULT);
    ui_modern_style_label_body(ui_ShotDisplayValueLabel);

    // Create buttons
    ui_ShotAddButton = lv_btn_create(ui_Shot_Counter_Page);
    lv_obj_set_width(ui_ShotAddButton, 80);
    lv_obj_set_height(ui_ShotAddButton, 50);
    lv_obj_set_x(ui_ShotAddButton, -60);
    lv_obj_set_y(ui_ShotAddButton, 20);
    lv_obj_set_align(ui_ShotAddButton, LV_ALIGN_CENTER);
    ui_modern_style_button_primary(ui_ShotAddButton);

    ui_ShotAddLabel = lv_label_create(ui_ShotAddButton);
    lv_label_set_text(ui_ShotAddLabel, "+");
    lv_obj_set_align(ui_ShotAddLabel, LV_ALIGN_CENTER);
    lv_obj_set_style_text_font(ui_ShotAddLabel, &lv_font_montserrat_24, LV_PART_MAIN | LV_STATE_DEFAULT);

    ui_ShotSubtractButton = lv_btn_create(ui_Shot_Counter_Page);
    lv_obj_set_width(ui_ShotSubtractButton, 80);
    lv_obj_set_height(ui_ShotSubtractButton, 50);
    lv_obj_set_x(ui_ShotSubtractButton, 60);
    lv_obj_set_y(ui_ShotSubtractButton, 20);
    lv_obj_set_align(ui_ShotSubtractButton, LV_ALIGN_CENTER);
    ui_modern_style_button_primary(ui_ShotSubtractButton);

    ui_ShotSubtractLabel = lv_label_create(ui_ShotSubtractButton);
    lv_label_set_text(ui_ShotSubtractLabel, "-");
    lv_obj_set_align(ui_ShotSubtractLabel, LV_ALIGN_CENTER);
    lv_obj_set_style_text_font(ui_ShotSubtractLabel, &lv_font_montserrat_24, LV_PART_MAIN | LV_STATE_DEFAULT);

    ui_ShotResetButton = lv_btn_create(ui_Shot_Counter_Page);
    lv_obj_set_width(ui_ShotResetButton, 120);
    lv_obj_set_height(ui_ShotResetButton, 40);
    lv_obj_set_x(ui_ShotResetButton, 0);
    lv_obj_set_y(ui_ShotResetButton, 80);
    lv_obj_set_align(ui_ShotResetButton, LV_ALIGN_CENTER);
    ui_modern_style_button_secondary(ui_ShotResetButton);

    ui_ShotResetButtonLabel = lv_label_create(ui_ShotResetButton);
    lv_label_set_text(ui_ShotResetButtonLabel, "Reset");
    lv_obj_set_align(ui_ShotResetButtonLabel, LV_ALIGN_CENTER);

    // Navigation buttons
    ui_Page3HomeBTN = lv_btn_create(ui_Shot_Counter_Page);
    lv_obj_set_width(ui_Page3HomeBTN, 50);
    lv_obj_set_height(ui_Page3HomeBTN, 25);
    lv_obj_set_x(ui_Page3HomeBTN, -60);
    lv_obj_set_y(ui_Page3HomeBTN, 125);
    lv_obj_set_align(ui_Page3HomeBTN, LV_ALIGN_CENTER);
    ui_modern_style_button_icon(ui_Page3HomeBTN);

    ui_Page3HomeBTN1 = lv_label_create(ui_Page3HomeBTN);
    lv_label_set_text(ui_Page3HomeBTN1, "HOME");
    lv_obj_set_align(ui_Page3HomeBTN1, LV_ALIGN_CENTER);

    ui_Page3PrevBTN = lv_btn_create(ui_Shot_Counter_Page);
    lv_obj_set_width(ui_Page3PrevBTN, 50);
    lv_obj_set_height(ui_Page3PrevBTN, 25);
    lv_obj_set_x(ui_Page3PrevBTN, 0);
    lv_obj_set_y(ui_Page3PrevBTN, 125);
    lv_obj_set_align(ui_Page3PrevBTN, LV_ALIGN_CENTER);
    ui_modern_style_button_icon(ui_Page3PrevBTN);

    ui_Page3PrevBTN1 = lv_label_create(ui_Page3PrevBTN);
    lv_label_set_text(ui_Page3PrevBTN1, "PREV");
    lv_obj_set_align(ui_Page3PrevBTN1, LV_ALIGN_CENTER);

    ui_Page3NextBTN = lv_btn_create(ui_Shot_Counter_Page);
    lv_obj_set_width(ui_Page3NextBTN, 50);
    lv_obj_set_height(ui_Page3NextBTN, 25);
    lv_obj_set_x(ui_Page3NextBTN, 60);
    lv_obj_set_y(ui_Page3NextBTN, 125);
    lv_obj_set_align(ui_Page3NextBTN, LV_ALIGN_CENTER);
    ui_modern_style_button_icon(ui_Page3NextBTN);

    ui_Page3NextBTN1 = lv_label_create(ui_Page3NextBTN);
    lv_label_set_text(ui_Page3NextBTN1, "NEXT");
    lv_obj_set_align(ui_Page3NextBTN1, LV_ALIGN_CENTER);

    // Add event callbacks
    lv_obj_add_event_cb(ui_ShotAddButton, ui_event_ShotAddButton, LV_EVENT_ALL, NULL);
    lv_obj_add_event_cb(ui_ShotSubtractButton, ui_event_ShotSubtractButton, LV_EVENT_ALL, NULL);
    lv_obj_add_event_cb(ui_ShotResetButton, ui_event_ShotResetButton, LV_EVENT_ALL, NULL);
    lv_obj_add_event_cb(ui_Page3HomeBTN, ui_event_Page3HomeBTN, LV_EVENT_ALL, NULL);
    lv_obj_add_event_cb(ui_Page3PrevBTN, ui_event_Page3PrevBTN, LV_EVENT_ALL, NULL);
    lv_obj_add_event_cb(ui_Page3NextBTN, ui_event_Page3NextBTN, LV_EVENT_ALL, NULL);

    // Initial display update
    update_shot_display_label();
}

// --- Screen destroy function ---
void ui_Shot_Counter_Page_screen_destroy(void)
{
    if (ui_Shot_Counter_Page)
    {
        lv_obj_del(ui_Shot_Counter_Page);
        ui_Shot_Counter_Page = nullptr;
    }
}
